<?php
/**
 * 
 * Implements hook_init().
 */
function compare_item_init() {
  // Adds a js file to the module.
  drupal_add_js(drupal_get_path('module', 'compare_item').'/js/compare_item.js');
  // Adds a css file to the module.
  drupal_add_css(drupal_get_path('module', 'compare_item') . '/css/compare_item.css');
}

/**
 * 
 * Implements hook_menu().
 */
function compare_item_menu() {
	$items = array();
	
//	$items['compare'] = array(
//	 'page callback' => 'drupal_get_form',
//	 'page arguments' => array('compare'),
//	 'access arguments' => TRUE,
//	 'type' => MENU_CALLBACK, 
//	);
	
	$items['get_image'] = array(
	 'page callback' => 'get_image',
	 'access arguments' => TRUE,
	 'type' => MENU_CALLBACK,
	);
//	
//	$items['compare_block'] = array(
//	 'page callback' => 'compare_block',
//	 'access arguments' => TRUE,
//	 'type' => MENU_CALLBACK,
//	);
	
	return $items;
}

/**
 * 
 * Implements hook_help().
 * @param $path
 * @param $arg
 */
function compare_item_help($path, $arg)  {
	switch ($path) {
		case 'admin/help#compare':
			return '<p>'. t ('Adds a compare checkbox beside the content type') .'</p>';
			break;
	}
}

/**
 * Implement hook_views_api().
 */
function compare_item_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'compare') .'/includes/views',
    );
  }
}

/**
 * 
 * Implements hook_permission().
 */
function compare_item_permission() {
	return array(
	 'access compare content' => array(
	   'title' => t('Access content for current posts'),
	   'decription' => t('Perform adminisstration tasks for compare module'),
	   'restrict access' => TRUE,
	 ),
	);
}

/**
 * 
 * Implements hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function compare_item_form_alter(&$form, &$form_state, $form_id) {
//	dsm($form);
	switch($form_id) {
		case "node_type_form":
		  $form['chkCompare'] = array(
		    '#type' => 'fieldset',
		    '#title' => t('Enable compare'),
		    '#collapsible' => TRUE,
		    '#group' => 'additional_settings',
		  );
		  $form['chkCompare']['compare'] = array(
	      '#type' => 'checkbox',
        '#title' => t('Check if you want to enable compare for this content type'),
		    '#default_value' => 1,
		  );
		  $form['chkCompare']['teaser_compare'] = array(
		    '#type' => 'checkbox',
		    '#title' => t('Check if you want to display compare option in teasers'),
		    '#default_value' => 1,
		  );
		  $form['#submit'][] = 'compare_item_node_type_submit';
		  break;
	}
}

function compare_item_node_type_submit($form, &$form_state)  {
	$compare = $form_state['values']['compare'];
	$teaser_compare = $form_state['values']['teaser_compare'];
	variable_set('is_compare', $compare);
	variable_set('is_teaser_compare', '$teaser_compare');
}

/**
 * Implements of hook_views_pre_render().
 */
function compare_item_views_pre_render($view)  {
//	dsm($view->result);
  $flag_count = 0;
	$filters = $view->filter;
	foreach (array_keys($filters) as $filter_key) {
		$flag_count++;
	}
	if ($flag_count <= 2) {
//		foreach ($view->result AS $item => $value) {
//			$view->result[$item]->compare = 'Add to Compare';
//		}
	}
	else {
		echo 'cannot add to compare';
	}
}
/**
 * Implements hook_node_view().
 */
function compare_item_node_view($node, $view_mode, $langcode) {
//	dsm($node);
	if (($node->type == 'cars') && (variable_get('is_compare') != '0') && (variable_get('is_teaser_compare') != '0')) {
		$node->content['body'][0]['#markup'] .= "<input style='display:inline' type='checkbox' id='$node->nid' class='compare'/>&nbsp;<label style='display:inline'>Add to compare</label>";
	}
}

/**
 * 
 * Writes the image uri
 */
function get_image()  {
	$image_id = (int)$_GET['id'];
//	echo $image_id;
  $select_fid_query = db_select('file_usage', 'fu')
            ->fields('fu')
            ->where('fu.id = :id', array(':id' => $image_id))
//            ->condition('fu.id', ':id', '=', array(':id' => $image_id))
            ->execute();
//            ->fetchAssoc();
  
  $fid = $select_fid_query->fetchAssoc();
        
  $select_image_query = db_select('file_managed', 'fm')
            ->fields('fm')
            ->where('fm.fid = :fid', array(':fid' => $fid['fid']))
//            ->condition('fm.fid', ':fid', '=', array(':fid' => $fid['fid']))
            ->execute();
//            ->fetchAssoc();
  
  $uri = $select_image_query->fetchAssoc();
//  dsm($select_fid_query);
//  dsm($select_image_query);
//        dsm($uri);
//  drupal_json_output($image_id . " " . $select_fid_query->rowCount() . " " . $select_image_query->rowCount() . " " . $uri['uri']);
  drupal_json_output($uri['filename']);
//	$result = db_query('SELECT nid FROM node WHERE nid = :nid', array(':nid' => 1));
//  foreach ($result as $id) {
//  	
//  }
//	drupal_json_output($id->nid);
//  dsm($result);
}
//
//function compare_block()  {
//	$form['']
//