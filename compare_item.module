<?php
/**
 * Implements hook_init().
 */
function compare_item_init() {
  // Adds a js file to the module.
  drupal_add_js(drupal_get_path('module', 'compare_item').'/js/compare_item.js');
  // Adds a css file to the module.
  drupal_add_css(drupal_get_path('module', 'compare_item') . '/css/compare_item.css');
}

/**
 * Implements hook_menu().
 */
function compare_item_menu() {
	$items = array();
	
//	$items['compare'] = array(
//	 'page callback' => 'drupal_get_form',
//	 'page arguments' => array('compare'),
//	 'access arguments' => TRUE,
//	 'type' => MENU_CALLBACK, 
//	);
	$items['compare_item_get_image'] = array(
	 'page callback' => 'compare_item_get_image',
	 'access arguments' => TRUE,
	 'type' => MENU_CALLBACK,
	);
//	
//	$items['compare_block'] = array(
//	 'page callback' => 'compare_block',
//	 'access arguments' => TRUE,
//	 'type' => MENU_CALLBACK,
//	);
	
	return $items;
}

/**
 * Implements hook_help().
 */
function compare_item_help($path, $arg)  {
	switch ($path) {
		case 'admin/help#compare':
			return '<p>'. t ('Adds a compare checkbox beside the content type') .'</p>';
			break;
	}
}

/**
 * 
 * Implements hook_permission().
 */
function compare_item_permission() {
	return array(
	 'access compare content' => array(
	   'title' => t('Access content for current posts'),
	   'decription' => t('Perform adminisstration tasks for compare module'),
	   'restrict access' => TRUE,
	 ),
	);
}

/**
 * Implements hook_form_alter().
 */
function compare_item_form_alter(&$form, &$form_state, $form_id) {
//	dsm($form);
	switch($form_id) {
		case "node_type_form":
		  $form['chkCompare'] = array(
		    '#type' => 'fieldset',
		    '#title' => t('Enable compare'),
		    '#collapsible' => TRUE,
		    '#group' => 'additional_settings',
		  );
		  $form['chkCompare']['compare'] = array(
	      '#type' => 'checkbox',
        '#title' => t('Check if you want to enable compare for this content type'),
		    '#default_value' => 1,
		  );
		  $form['chkCompare']['teaser_compare'] = array(
		    '#type' => 'checkbox',
		    '#title' => t('Check if you want to display compare option in teasers'),
		    '#default_value' => 1,
		  );
		  $form['#submit'][] = 'compare_item_node_type_submit';
		  break;
	}
}

function compare_item_node_type_submit($form, &$form_state)  {
	$compare = $form_state['values']['compare'];
	$teaser_compare = $form_state['values']['teaser_compare'];
	variable_set('is_compare', $compare);
	variable_set('is_teaser_compare', '$teaser_compare');
}

/**
 * Implements hook_views_api().
 */
function compare_item_views_api($module, $api) {
	 return array(
	      'api' => 3,
	      'path' => drupal_get_path('module', 'compare_item') .'/includes/views',
   );	  
}

///**
// * Implements hook_views_pre_render().
// */
//function compare_item_views_pre_render($view)  {
////	dsm($view->result);
//  $flag_count = 0;
//	$filters = $view->filter;
//	foreach (array_keys($filters) as $filter_key) {
//		$flag_count++;
//	}
//	if ($flag_count <= 2) {
////		foreach ($view->result AS $item => $value) {
////			$view->result[$item]->compare = 'Add to Compare';
////		}
//	}
//	else {
//		echo 'cannot add to compare';
//	}
//}
/**
 * Implements hook_node_view().
 */

//function compare_item_node_view($node, $view_mode, $langcode) {
////	dsm($node);
//	if (($node->type == 'cars') && (variable_get('is_compare') != '0') && (variable_get('is_teaser_compare') != '0')) {
//		$node->content['body'][0]['#markup'] .= "<input style='display:inline' type='checkbox' id='$node->nid' class='compare'/>&nbsp;<label style='display:inline'>Add to compare</label>";
//	}
//}

/**
 * 
 * Writes the image uri
 */
function compare_item_get_image()  {
	$image_id = (int)$_GET['id'];
//	echo $image_id;
  $select_fid_query = db_select('file_usage', 'fu')
            ->fields('fu')
            ->where('fu.id = :id', array(':id' => $image_id))
//            ->condition('fu.id', ':id', '=', array(':id' => $image_id))
            ->execute();
//            ->fetchAssoc();
  
  $fid = $select_fid_query->fetchAssoc();
        
  $select_image_query = db_select('file_managed', 'fm')
            ->fields('fm')
            ->where('fm.fid = :fid', array(':fid' => $fid['fid']))
//            ->condition('fm.fid', ':fid', '=', array(':fid' => $fid['fid']))
            ->execute();
//            ->fetchAssoc();
  
  $uri = $select_image_query->fetchAssoc();
//  dsm($select_fid_query);
//  dsm($select_image_query);
//        dsm($uri);
//  drupal_json_output($image_id . " " . $select_fid_query->rowCount() . " " . $select_image_query->rowCount() . " " . $uri['uri']);

//  drupal_json_output($uri['filename']);

//  if ($uri['uri']==null) {
//  	$image_url=url('sites/default/files/default_images'.$uri['filename'], array('absolute'=>true));	
//  }
//  else {
  $image_url=url('sites/default/files/'.file_uri_target($uri['uri']), array('absolute'=>true));
//  }
  drupal_json_output($image_url);
//	$result = db_query('SELECT nid FROM node WHERE nid = :nid', array(':nid' => 1));
//  foreach ($result as $id) {
//  	
//  }
//	drupal_json_output($id->nid);
//  dsm($result);
}

//
//function compare_block()  {
//	$form['']
//

/**
 * Implements hook_block_info().
 */
function compare_item_block_info() {
  $blocks['compare-item-list'] = array(
    'info' => t('Compare List'),
  );
  return $blocks;
}
 
/**
 * Implements hook_block_view().
 */
function compare_item_block_view($delta='') {
  $block = array();
  switch ($delta) {
    case 'compare-item-list':
//		drupal_add_js(drupal_get_path('module', 'compare_item').'/js/compare_item.js');
      $block['subject'] = t('Compare List');
      $block['content'] = compare_item_contents();
      break;
  }
  drupal_add_js(drupal_get_path('module', 'compare_item').'/js/load-selected-images.js');
//  print_r($block);
  return $block;
}
 
/**
 * Custom html block
 * @return string
 */
function compare_item_contents() {
  return '
  <div id="compare_cart">
  <div id="compare_block" class="div_image">
    <div class="div_image" name="compare_item" id="compare_item">
      <img src="/compare/sites/all/modules/compare_item/images/add_item.jpg" class="image" height="50px" width="50px" /><span class="remove_item"></span>
    </div>
    <div class="div_image" name="compare_item" id="compare_item">
      <img src="/compare/sites/all/modules/compare_item/images/add_item.jpg" class="image" height="50px" width="50px" /><span class="remove_item"></span>
    </div>
    <div class="div_image" name="compare_item" id="compare_item">
      <img src="/compare/sites/all/modules/compare_item/images/add_item.jpg" class="image" height="50px" width="50px" /><span class="remove_item"></span>
    </div>
    <div class="div_image" name="compare_item" id="compare_item">
      <img src="/compare/sites/all/modules/compare_item/images/add_item.jpg" class="image" height="50px" width="50px" /><span class="remove_item"></span>
    </div>
  </div>
  <div id="compare_cart_options" class="div_image">
    <a id="aclose" class="compare_cart_options_css">Close</a><label class="compare_cart_options_css">|</label><a id="aclearlist" class="compare_cart_options_css">Clear list</a><button id="btn_compare" class="compare_cart_options_css">Compare</button>
  </div>
</div>
'
  ;
}

/*Creating new field type to display the Add to compare checkbox; 
*/

/**
 * Implements hook_field_info().
 */
function compare_item_field_info() {
	return array(
		'compare_item_compare' => array(
	      'label' => t('Compare'), 
	      'description' => t('This field adds the add to compare checkbox to comparable items.'),
	      'default_widget' => 'compare_item_compare_widget', 
	      'default_formatter' => 'compare_item_compare_formatter',
	    )
	);
}

/**
 * Implements hook_field_widget_info().
 */
function compare_item_field_widget_info() {
	return array(
		'compare_item_compare_widget' => array(
			'label' => t('Compare checkbox'),
		  'field types' => array('compare_item_compare'),
			'behaviors' => array(
				'multiple values' => FIELD_BEHAVIOR_DEFAULT,
				'default value' => FIELD_BEHAVIOR_DEFAULT,
			)
		),
	);	
}

/**
 * Implements hook_field_widget_form().
 */
function compare_item_field_widget_form(&$form,&$form_state,$field,$instance,$langcode,$items,$delta,$element) {
	$compareValue = isset($items[$delta]['comparable']) ? $items[$delta]['comparable'] : '';

	$element += array(
	    '#delta' => $delta,
	  );
//  dsm($items[$delta]['comparable']);
  $element['comparable'] = array(
  );
  switch ($instance['widget']['type'])
  {
    case 'compare_item_compare_widget':
          $element['comparable'] = array(
            '#title' => t('Comparable'),
            '#type' => 'checkbox',
            '#default_value' => $compareValue,
            );
 			break;
    default:
      break;
  }
//	$element += array(
//		'#title' => t('Comparable'),
//    '#type' => 'checkbox',
//    '#default_value' => isset($items['comparable']) ? $items['comparable'] : '',
//  );
  dsm($element);
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function compare_item_field_is_empty($item, $field) {
  // has the user checked off the checkbox?
//  dsm($item['comparable']);
  if (empty($item['comparable'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function compare_item_field_formatter_info() {
	return array(
	    'compare_item_compare_formatter' => array(
	      'label' => t('Default checkbox'), 
	      'field types' => array('compare_item_compare'),
	    ),
	  );
}

//function compare_item_value_info() {
//	return array(0 => 'false', 1 => 'true');
//}

/**
 * Implements hook_field_formatter_view().
 */
function compare_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
//	dsm($entity_type);
//	dsm($entity);
	dsm($entity);
	if($entity_type == "commerce_product") {
//		$pid = $entity->product_id.'-'.$entity_type.'-'.$entity->type;//This is causing problem when removing items from compare list.
			$pid = $entity->product_id;
//		echo $pid;
		$element[] = array(
			'#markup' => "<input style='display:inline' type='checkbox' id='$pid' class='compare'/>&nbsp;<label style='display:inline'>Add to compare</label>",
		);
	}
//	elseif($entity_type == "node") {
//		$nid = $entity->nid.'-'.$entity_type.'-'.$entity->type;//This is causing problem when removing items from compare list.
////		$nid = $entity->nid;
//		$element[] = array(
//			'#markup' => "<input style='display:inline' type='checkbox' id='$nid' class='compare'/>&nbsp;<label style='display:inline'>Add to compare</label>",
//		);
//	}
//	$nid = $entity->nid;
//	$element[] = array(
//		'#markup' => "<input style='display:inline' type='checkbox' id='$nid' class='compare'/>&nbsp;<label style='display:inline'>Add to compare</label>",
////		'#markup' => 'Je',
//	); 
//	dsm($element);
//	array(
//	    'items' => array(
//	      '#type' => 'container',
//	      '#attributes' => array( 'class' => array( 'field-item') ),
//	      'text' => array(
//	        '#markup' => t('Making this comparable'),
//	      ),
//	    ),
//  	); 
   return $element;
} 
